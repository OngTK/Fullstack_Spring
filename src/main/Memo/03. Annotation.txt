```
[ REST ]
정의
    웹의 자원을 관리하는 아키텍처
특징
    1. 자원(Resources), 행동(Method), 표현
    2. HTTP 프로토콜을 이용하여 클라이언트와 서바 간의 일관성있는 통신을 구성

[ REST API ]
    1. REST 기반의 웹서비스 인터페이스를 구축
    2. HTTP 요청을 통해 자원(데이터)의 CRUD 기능을 제공

[ RESTful API ]
    1. REST API의 아키텍처를 잘 사용하는지에 대한 개념
    2. 조건
        1) 일관성 유지
        2) 적절한 HTTP Method : Post(등록), Get(조회), Put(수정), Delete(삭제)
        3) 무상태성
        4) JSON / XML 형식으로 반환

```
======================================================================================================================

1. @SpringBootApplication : 스프링 부트 환경 설정
    1) @SpringBootConfiguration
        : 프로젝트 내의 @Configuration 어노테이션을 찾아서 bean(객체)를 설정·등록할 수 있도록 함
    2) @EnableAutoConfiguration
        : Spring Boot가 자동으로 필요한 bean을 설정·등록
        : 실행과 동시에 web server에 해당하는 내장형 TomCat을 설정함
    3) @ComponentScan ☆★☆★
        : 현재 클래스를 기준, 현재 패키지 및 하위 패키지 내의 컴포넌트(클래스) 등을 자동으로 스캔하여 등록
            (1) 스캔 대상 : @Component / @RestController / @Controller /
                           @Service / @Repository / @Mapper etc : 주로 MVC 어노테이션
            (2) 주의점    : 현 클래스(AppStart)를 기준으로 상위 패키지는 스캔 불가,
                           따라서 AppStart는 항상 최상위 패키지에 위치해야 한다.

2. Controller
    1) @Controller : 컨트롤러 어노테이션
        (1) @Component
            Spring 컨테이너(메모리)에 bean을 등록·생성
            ☆★싱글톤 대체☆★
        (2) Spring Controller : 기본적으로 HTTP 통신을 지원
    2) @RestController
        기존 Controller에 @ResponseBody를 내장하고 있음

3. Mapping 관련 : REST
    1) @PostMapping
        HTTP method 중 Post 방식의 요청을 매핑
        → Java Create
    2) @GetMapping
        HTTP method 중 get 방식의 요청을 매핑
        → Java Read
    3) @PutMapping
        HTTP method 중 Put 방식의 요청을 매핑
        → Java Put
    4) @DeleteMapping
        HTTP method 중 Delete 방식의 요청을 매핑
        → Java Delete
    5) @____Mapping("/URL정의")
        URL 주소 정의하며 베이스 주소인 [http://localhost:8080] 뒤로 유도할 URL을 Mapping 뒤에 기재
        한 URL 내에서 CRUD가 중복될 수 없음

4. @ResponseBody
    : Java가 사용하는 타입을 HTTP 언어인 JSON 타입으로 자동 변환·반환하는 어노테이션
    : Java에서 Method 실행 후 결과를 JSON으로 반환한다면, 해당 함수위에 어노테이션 표기

5. 매개변수 관련
    1) 특징
        - HTTP QueryString을 이용한 매개변수 전달
        - http://localhost:8080/URL정의?param=value
        - 실행시 value가 param의 값으로 들어오는 것을 알 수 있음
        - 주의! value는 모두 String 으로 인식 (그래도 자동으로 타입변환 지원~~)
    2) Annotation
        (1) @ModelAttribute
            - 복수 파라미터에 객체를 바인딩
            - DTO 타입일 때 기본 적용
            - DTO, VO(읽기모드) 등 만들어진 객체 타입
            - 처리가능요청 : QueryString, <form : 첨부파일O >
            - 지원 HTTP메소드 : Get / Post / Put / Delete

        (2) @RequestParam( )
            - 단일 파라미터에 변수 바인딩
            - 함수의 매개변수명과 쿼리스트링의 매개변수명이 일치할 경우 생략가능
            - 기본형 : int / String / List / Map
            - 처리가능요청 : QueryString, <form : 첨부파일X >
            - 지원 HTTP메소드 : Get / Post / Put / Delete

            ① name = "URL매개변수명"
                - URL상 ? 뒤에 매핑할 매개변수명
                - Java의 매개변수명과 QueryString의 매개변수명이 동일할 경우, 생략 가능
            ② defaultValue = "초기값"
                - 매개변수 생략 시 초기값
            ③ required = true or false
                - 매개변수가 없을 경우, 예외 발생
                - true : 예외 발생
                - false : 예외 발생 X

        (3) @RequestBody
            - 본문(body)를 객체로 바인딩
                * 본문·body?
                     - HTTP 본문에 매개변수를 표현
                     - 매개변수가 노출되지 않음, 보안 안전성
                     - Dto / List / Map tkdyd rksmd
                     - ex) 비밀번호, 아이디
                     - Post / Put에 대해서만 객체 지원
            - DTO 타입에 사용
            - Body 내에서 사용
            - 지원 HTTP메소드 : Post / Put 만 사용 가능