[ Spring 실행 방법 ]
    1. 폴더(패키지) 내 'AppStart' 클래스 성성
    2. 클래서 위에 '@SpringBootApplication' Annotation
    3. main 메소드 안에서 `SpringApplication.run(AppStart.class);`
        ※ 클래스명 주의, import 주의
    4. web 브라우저에 'localhost:8080'
    5. 화면에 "Whitelabel Error Page"이 출력되면 성공
        ※ Spring은 web이므로 ip 충돌로 에러가 발생할 수 있음

[ Spring 기본 용어 ]===========================================================

[ 라이브러리 ]
    - 코드들을 메소드화하여 '.jar' 확장자로 만든 집합으로, 미리 만들어진 코드를 제공
[ 프레임워크 ]
    - 라이브러리와 개발에 필요한 환경설정까지 함께 제공

[ Spring ]
    정의
        - Spring은 Java 기반의 엔터프라이즈 급 애플리케이션 개발을 위한 프레임 워크
    활용
        - 전자정부 프레임워크 (대한민국 개발 표준)
    특징
        - IOC/DI : 객체 의존성
        - AOP : 로직 분리 모듈화
        - MVC2 3 tier 강제 지원
        - 외부 라이브러리 등과의 확장성이 좋음

[ Spring Boot ]
    정의
        스프링 프레임워크를 빠르게 사용할 수 있도록 하는 자동설정기반의 스타터 프레임워크
    활용
        복잡한 설정을 제공
    특징
        스프링부트 안에 스프링이 포함되어 있음
    설정
        내장 TomCat을 지원
            : Java에서 제공하는 Web 관련 라이브러리를 포함한 SW

[ Gradle ]
    정의
        Java 기반의 빌드 자동화 SW
    특징
        의존성 관리, 배포·패키징을 보다 쉽게 자동 처리해줌

===================================================================================
※ 메타데이터
1) 정의
    Java 코드에 추가적인 데이터를 삽입할 때 사용
2) 동작 구조
    (1) 컴파일 : .java → .class 파일로 번역하면서 byte로 변환하는 행위
    (2) 리플렉션 : 런타임 중 class를 읽어와서 동적으로 객체를 조작하는 행위
3) 예
    : 스티커·라벨처럼 해당 코드를 사용하는 방법·부가 정보를 부착

[ Annotation @ ]
1) 정의
    Java·Spring에서 코드에 meta date를 추가하는 문법
2) 목적
    - 메타데이터 제공
    - 코드 간소화
    - 가독성 향상
3) 종류
    (1) 표준 어노테이션
        Java에서 기본적으로 제공하는 어노테이션
        ① @Override : 상위클래스의 메소드를 재정의
        ② @Deprecated : 더이상 사용하지 않는 코드
    (2) 메타 어노테이션
        코드를 정의하거나 동작을 제어할 때 사용하는 어노테이션
        ① 서블릿(Java web class)
        ② 스프링
4) 생성방법
    (1) @interface 어노테이션명{}
        실행문 안에 추상 메소드 선언
    (2) @interface 위에 다양한 @·어노테이션을 설정
        ① @Retention() : 어노테이션 생성주기(유지기간)을 설정
            @Retention( RetentionPolicy.RUNTIME ) : 런타임까지 유지
            @Retention( RetentionPolicy.CLASS )   : class 파일에 포함 = 런타임이 아닐때도 유지
            @Retention( RetentionPolicy.RESOURCE) : 컴파일 이후 삭제
        ② @Target()    : 어노테이션 적용 대상을 설정
            @Target( ElementType.METHOD )       :  메소드에서 사용
            @Target( ElementType.TYPE )         :  클래스, 인터페이슷에서 사용
            @Target( ElementType.FIELD )        :  멤버변수에서 사용
            @Target( ElementType.PARAMETER )    :  매개변수에서 사용
            @Target( ElementType.CONSTRUCTOR )  :  생성자에서 사용
