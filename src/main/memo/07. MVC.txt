[ MVC 패턴 ]
    1) 정의
        - SW공학에서 사용되는 디자인 패턴 중 하나
    2) 목적
        - 프로그램을 깔끔하고 효율적으로 만들기 위한 설계 방법
    3) 종류
        (1) MVC1
            Controller · View <-> model
            - JSP 파일에서 HTML과 JAVA를 한번에 작성
            - 장점 : 빠른 개발
            - 단점 :  유지보수·역할 분담에 어려움
        (2) MVC2
            View <-> Controller <-> model
            - View 파일은 HTML로 작성
            - Controller에서는 제어 로직만 작성
            - 장점 : 화면과 로직이 분리
            - 단점 : 파일의 수 증가로 관리의 어려움
        (3) MVC2 3Tier
            View <-> Controller <-> Service <-> model
            - Spring MVC 에서 사용하는 패턴
            - Controller의 제어와 로직 역할을 분리
            - 장점 : 관점 지향 프로그래밍에 특화
            - 단점 : 파일의 수 증가로 관리의 어려움, 복잡도 증가
    4) 구역 · Layer
        (1) View
            : HTML / CSS / JS 등 Front-End
            : JSP / 타임리프 / 머스테치 / React
        (2) Controller
            : @RestController / @Controller
            : HTTP과 요청·응답의 통신
            : 매개변수/반환 타입 관리·변환
            : (타입) 유효성 검사, 예외처리 etc.
            ** Controller는 다른 Controller를 호출하면 안됨!
        (3) Service
            : @Service
            : 비즈니스 로직(기능에 있어서의 실직적인 중요 코드)
            : CRUD, 데이터 검증, 연산, 알고리즘, 트랜잭션 etc
            : 임시 비밀번호 생성
            ** Service는 다른 Service를 호출할 수 있음!
        (4) Repository
            : @Repository
            : 실질적인 Data 저장소
            : 엔티티를 조작하는 코드
            : SQL 조작
            : DAO / JPA / myBatis